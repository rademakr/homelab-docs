{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MkDocs","text":""},{"location":"#index","title":"Index","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>You'll need python &amp; pip installed If you want seemless deployments to GitHub pages, you'll also need a GitHub account.</p>"},{"location":"#installation","title":"Installation","text":"<p>First things first, create a new public repository in your GitHub space. I will call mine <code>homelab-docs</code>. Once that is done, you can clone the repo on your local server:</p> <pre><code>rademakr@prismpi[~]$ git clone git@github.com:rademakr/homelab-docs.git\n</code></pre> <p>That will create a new homelab-docs directory that is git and GitHub related. Now we can install mkdocs.</p> <p><pre><code>rademakr@prismpi[~/homelab-docs]$ python -m venv venv\nrademakr@prismpi[~/homelab-docs]$ source venv/bin/activate\n(venv) rademakr@prismpi[~/homelab-docs]$ pip --version\npip 23.0.1 from /home/rademakr/homelab-docs/venv/lib/python3.11/site-packages/pip (python 3.11)\n(venv) rademakr@prismpi[~/homelab-docs]$ pip install mkdocs-material\n(venv) rademakr@prismpi[~/homelab-docs]$ pip install \"mkdocs-material[imaging]\"\n</code></pre> This will install mkdocs-material.</p> <p>Note</p> <p>All these lines have their importance.  On line 1, we create a python virtual environment. Virtual environments are important to isolate the project (in this case mkdocs) from the rest of the system. Line 2 shows how to activate the virtual environment which will be the default Python interpreter for the duration of the shell session. You need to run the line 2 command <code>source venv/bin/activate</code> from the homlab-docs directory each time you work on the mkdocs project and want to serve pages. Lines 5 and 6 install Python modules required for mkdocs-material (line 5) and those for the 'social' plugin (line 6). You can serve pages by running <code>mkdocs serve</code>.</p> <p>We'll create our files with the following command:</p> <p><code>(venv) rademakr@prismpi[~/homelab-docs]$ mkdocs new .</code></p> <p>Which will create two files :</p> <pre><code>INFO    -  Writing config file: ./mkdocs.yml\nINFO    -  Writing initial docs: ./docs/index.md\n</code></pre> <p>The <code>mkdocs.yml</code> file is where you'll set all the settings for the website, while the <code>\u00ecndex.md</code> in the <code>docs</code> direcory is a markdown page that will be the first tab of the homepage. We'll be able to remove that file later, or update it with the text you want...</p> <p>The idea is to add one .md file per project. Thus I have this file named <code>mkdocs.md</code> for the instructions on setting up mkdocs. Might also want to create a \"fixed\" index, with directories per project in order to keep the upper hand on the sorting of pages (I believe by default, mkdocs sorts alphabetically).</p> <p>I will add one for Ansible, and a few to describe specific middleware configuration.</p>"},{"location":"#github-integration-with-github-actions","title":"GitHub integration with GitHub-Actions","text":"<p>Create the <code>.github</code> directory and <code>workflows</code> subdirectory. In the <code>workflows</code> directory create a file <code>ci.yml</code></p> <pre><code>mkdir -p .github/workflows\nvi .github/workflows/ci.yml\n</code></pre> <p>and paste the following:</p> <pre><code>name: ci\non:\n  push:\n    branches:\n      - master\n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - uses: actions/cache@v2\n        with:\n          key: ${{ github.ref }}\n          path: .cache\n      - run: pip install mkdocs-material\n      - run: pip install pillow cairosvg\n      - run: mkdocs gh-deploy --force\n</code></pre>"},{"location":"#todo","title":"TODO","text":"<p>git initialization (1)</p> <ol> <li>need to explain how to setup the GitHub repo and init the git env</li> </ol>"},{"location":"Ansible/","title":"Ansible","text":""},{"location":"Ansible/#intro","title":"Intro","text":"<p>Ansible is an open-source automation tool used for configuration management, application deployment, and task automation. It simplifies complex IT tasks by allowing administrators to automate repetitive tasks across multiple systems efficiently. Ansible operates by using SSH connections to communicate with remote servers, making it agentless and easy to set up. With its simple YAML syntax and powerful orchestration capabilities, Ansible enables organizations to streamline operations, increase productivity, and maintain consistency in their IT infrastructure.</p> <p>The importance of roles in Ansible should not be underestimated. They help organize tasks and clean up the playbook by organizing multiple directories for specific tasks or targeted hosts, instead of having everything in a gigantic monolithic file.</p> <p>The main playbook is responsible for calling the taskbooks organized in their respective directories. Directory structure is also important. Each role directory has a task directory with a main.yml file, and an optional files directory containing the files you would want to transfer to the remote hosts.</p>"},{"location":"Ansible/#config-files","title":"Config files","text":"<p>The main configuration files required for Anaible are <code>ansible.cfg</code> and <code>inventory</code>.</p> <ul> <li>inventory   This file will organize your differnet hosts in groups. The same host can be in several groups. These groups are linked to the roles we will be using.   For example:  </li> </ul> <pre><code>[rpi5]\nclearwhite\nplexpi\ntallglass\n\n[rpi4]\nprismpi\n\n[rpi3]\npihole3\nclearblue\n\n[plex_servers]\nplexpi\n\n[radius_servers]\nprismpi\n\n[ldap_certs]\nprismpi\nclearwhite\n\n[ldap_servers]\nprismpi\nclearwhite\n\n[web_servers]\nclearwhite\nprismpi\ntallglass\n\n[monitoring_servers]\nprismpi\n\n[postfix_client]\nclearwhite\nprismpi\npihole3\nclearblue\nplexpi\ntallglass\n</code></pre> <ul> <li>ansible.cfg   This file contains the \"default\" variables that are set, so you don't have to pass them on the command line.   For example </li> </ul> <pre><code>[defaults]\ninventory = inventory\nprivate_key_file = ~/.ssh/id_automate\nansible_python_interpreter = auto_silent\nremote_user = automate\ndeprecation_warnings = False\n</code></pre> <p>We can now start organizing our roles and taskbooks. Taskbooks are playbooks that are limited to their scope; a specific role. We'll need a directory structure for the roles. If my base directory is <code>~/ansible/ansible-homelab</code>, I need to create a <code>roles</code> directory, and below that, a directory for each specific role. For example if I have two roles; base and web_servers, I would have a directory structure like this:  </p> <pre><code>~/ansible/ansible-homelab/roles/base\n~/ansible/ansible-homelab/roles/web-servers\n</code></pre> <p>and with the roles' subdirectories it would look like this:  </p> <pre><code>~/ansible/ansible-homelab/roles/base/files\n~/ansible/ansible-homelab/roles/base/tasks\n~/ansible/ansible-homelab/roles/web-servers/files\n~/ansible/ansible-homelab/roles/web-servers/tasks\n</code></pre> <pre><code>rademakr@clearblue[~/ansible/ansible-homelab]$ ssha\nAgent pid 503453\nEnter passphrase for /home/rademakr/.ssh/id_ed25519:\nIdentity added: /home/rademakr/.ssh/id_ed25519 (clearblue rademakr)\nrademakr@clearblue[~/ansible/ansible-homelab]$ ansible-playbook -t bootstrap homelab.yml\n</code></pre> <pre><code>PLAY [all] ******************************************************************************************************************************\n\nTASK [Gathering Facts] *****************************************************************************************************************************************\nok: [clearwhite]\nok: [plexpi]\nok: [tallglass]\nok: [prismpi]\nok: [clearblue]\nok: [pihole3]\n\nTASK [update repo cache (Debian)] *****************************************************************************************************************************************\nok: [tallglass]\nok: [plexpi]\nok: [prismpi]\nok: [clearwhite]\nok: [clearblue]\nok: [pihole3]\n\nPLAY [all] ******************************************************************************************************************************\n\nTASK [Gathering Facts] *****************************************************************************************************************************************\nok: [clearwhite]\nok: [plexpi]\nok: [tallglass]\nok: [prismpi]\nok: [clearblue]\nok: [pihole3]\n\nTASK [bootstrap : create automate user] *****************************************************************************************************************************************\nok: [clearwhite]\nok: [tallglass]\nok: [plexpi]\nok: [prismpi]\nok: [clearblue]\nok: [pihole3]\n\nTASK [bootstrap : add ssh key for user automate] *****************************************************************************************************************************************\nok: [tallglass]\nok: [plexpi]\nok: [clearwhite]\nok: [prismpi]\nok: [clearblue]\nok: [pihole3]\n\nTASK [bootstrap : add sudoers file for automate] *****************************************************************************************************************************************\nok: [tallglass]\nok: [plexpi]\nok: [clearwhite]\nok: [prismpi]\nok: [pihole3]\nok: [clearblue]\n\nTASK [bootstrap : Copy bash files with owner and permissions] *****************************************************************************************************************************************\nok: [clearwhite] =&gt; (item=.bashrc)\nchanged: [plexpi] =&gt; (item=.bashrc)\nchanged: [tallglass] =&gt; (item=.bashrc)\nok: [clearwhite] =&gt; (item=.bash_profile)\nchanged: [prismpi] =&gt; (item=.bashrc)\nok: [tallglass] =&gt; (item=.bash_profile)\nok: [plexpi] =&gt; (item=.bash_profile)\nok: [prismpi] =&gt; (item=.bash_profile)\nok: [pihole3] =&gt; (item=.bashrc)\nchanged: [clearblue] =&gt; (item=.bashrc)\nok: [clearblue] =&gt; (item=.bash_profile)\nok: [pihole3] =&gt; (item=.bash_profile)\n\nTASK [bootstrap : Copy script files with owner and permissions] ******************************************************************************************************************************************\nok: [clearwhite] =&gt; (item=/home/rademakr/ansible/ansible-homelab/roles/bootstrap/files/scripts/motd.sh)\nok: [plexpi] =&gt; (item=/home/rademakr/ansible/ansible-homelab/roles/bootstrap/files/scripts/motd.sh)\nok: [tallglass] =&gt; (item=/home/rademakr/ansible/ansible-homelab/roles/bootstrap/files/scripts/motd.sh)\nok: [prismpi] =&gt; (item=/home/rademakr/ansible/ansible-homelab/roles/bootstrap/files/scripts/motd.sh)\nok: [clearblue] =&gt; (item=/home/rademakr/ansible/ansible-homelab/roles/bootstrap/files/scripts/motd.sh)\nok: [pihole3] =&gt; (item=/home/rademakr/ansible/ansible-homelab/roles/bootstrap/files/scripts/motd.sh)\n\nTASK [bootstrap : Copy etc files] ******************************************************************************************************************************************\nok: [clearwhite] =&gt; (item=/etc/DIR_COLORS)\nok: [plexpi] =&gt; (item=/etc/DIR_COLORS)\nok: [tallglass] =&gt; (item=/etc/DIR_COLORS)\nok: [prismpi] =&gt; (item=/etc/DIR_COLORS)\nok: [clearblue] =&gt; (item=/etc/DIR_COLORS)\nok: [pihole3] =&gt; (item=/etc/DIR_COLORS)\n\nPLAY [all] *******************************************************************************************************************************\n\nTASK [Gathering Facts] ******************************************************************************************************************************************\nok: [clearwhite]\nok: [plexpi]\nok: [tallglass]\nok: [prismpi]\nok: [clearblue]\nok: [pihole3]\n\nPLAY [ldap_certs] ******************************************************************************************************************************************\n\nTASK [Gathering Facts] ******************************************************************************************************************************************\nok: [clearwhite]\nok: [prismpi]\n\nPLAY [plex_servers] ******************************************************************************************************************************************\n\nTASK [Gathering Facts] ******************************************************************************************************************************************\nok: [plexpi]\n\nPLAY [postfix_client] ******************************************************************************************************************************************\n\nTASK [Gathering Facts] ******************************************************************************************************************************************\nok: [clearwhite]\nok: [plexpi]\nok: [prismpi]\nok: [clearblue]\nok: [tallglass]\nok: [pihole3]\n\nPLAY [radius_servers] ******************************************************************************************************************************************\n\nTASK [Gathering Facts] ******************************************************************************************************************************************\nok: [prismpi]\n\nPLAY [ldap_servers] ******************************************************************************************************************************************\n\nTASK [Gathering Facts] ******************************************************************************************************************************************\nok: [clearwhite]\nok: [prismpi]\n\nPLAY [web_servers] ******************************************************************************************************************************************\n\nTASK [Gathering Facts] ******************************************************************************************************************************************\nok: [clearwhite]\nok: [tallglass]\nok: [prismpi]\n\nPLAY [monitoring_servers] ******************************************************************************************************************************************\n\nTASK [Gathering Facts] ******************************************************************************************************************************************\nok: [prismpi]\n\nPLAY RECAP *******************************************************************************************************************************\nclearblue                  : ok=11   changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\nclearwhite                 : ok=14   changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\npihole3                    : ok=11   changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\nplexpi                     : ok=12   changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\nprismpi                    : ok=16   changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\ntallglass                  : ok=12   changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n</code></pre> <pre><code>- name: Add SSH key for user automate\n  tags: always\n  # Explanation: This task adds an SSH key for the user 'automate' to enable SSH access.\n  authorized_key:\n    user: automate\n    key: \"ssh-ed25519 AAAAC3NzaC1lZDI1MTE5AAAAIA7IUa5QX6XCbRS7Et1pb87QCLH+HlV6e+Cqd6d4A/xn automate\"\n\n- name: Set PS1 prompt color\n  tags: always\n  # Explanation: This task sets the PS1 prompt color in the .bashrc file.\n  replace:\n    path: /home/rademakr/.bashrc\n    regexp: '^\\s*PS1=\\$YELLOW'\n    replace: '\\t    PS1={{ ps1_color }}'\n\n- name: Install systemd-timesyncd to keep the time\n  tags: always\n  # Explanation: This task installs the systemd-timesyncd package to synchronize system time.\n  package:\n    name: systemd-timesyncd\n    state: latest\n\n- name: Setup systemd-timesyncd\n  tags: always\n  # Explanation: This task configures systemd-timesyncd by updating the NTP server.\n  replace:\n    path: /etc/systemd/timesyncd.conf\n    regexp: '^#NTP='\n    replace: 'NTP=10.5.5.1'\n\n- name: Install list of utilities\n  tags: always\n  # Explanation: This task installs a list of utilities (highlight, btop) on the system.\n  package:\n    name:\n      - highlight\n      - btop\n    state: latest\n\n- name: Copy .vimrc file with owner and permissions\n  tags: always\n  # Explanation: This task copies .vimrc and .bashrc files with specified ownership and permissions.\n  copy:\n    src: \"{{item}}\"\n    dest: \"/home/rademakr/\"\n    owner: \"rademakr\"\n    group: \"rademakr\"\n    mode: 0644\n  with_fileglob:\n    - \".vimrc\"\n    - \".bashrc\"\n\n- name: Set defaults in /etc/vim/vimrc\n  tags: always\n  # Explanation: This task sets defaults in the /etc/vim/vimrc configuration file.\n  replace:\n    path: /etc/vim/vimrc\n    regexp: '^\"set background=dark'\n    replace: 'set background=dark'\n\n- name: Copy /usr/local/bin script files with owner and permissions\n  tags: always\n  # Explanation: This task copies script files to /usr/local/bin with specified ownership and permissions.\n  copy:\n    src: \"{{item}}\"\n    dest: \"/usr/local/bin/\"\n    owner: \"root\"\n    group: \"root\"\n    mode: 0744\n  with_fileglob:\n    - \"/usr/local/bin/*\"\n\n- name: Copy timestamp.chk file with owner and permissions\n  # Explanation: This task copies timestamp.chk file to /var/tmp with specified ownership and permissions.\n  copy:\n    src: \"{{item}}\"\n    dest: \"/var/tmp/\"\n    owner: \"root\"\n    group: \"root\"\n    mode: 0644\n    force: no\n  with_fileglob:\n    - \"/var/tmp/timestamp.chk\"\n\n- name: Copy /etc/backup/BCKP-self.conf config file\n  tags: always\n  # Explanation: This task copies a configuration file to /etc/backup with specified ownership and permissions.\n  copy:\n    src: \"{{item}}\"\n    dest: \"/etc/backup/\"\n    owner: \"root\"\n    group: \"root\"\n    mode: 0644\n  with_fileglob:\n    - \"/etc/backup/*\"\n\n- name: Update /etc/crontab\n  tags: always\n  # Explanation: This task updates the system crontab file with scheduled tasks.\n  ansible.builtin.blockinfile:\n    path: /etc/crontab\n    block: |\n      # System backup on dao\n      02 1 * * *   root    nice -n 10      /usr/local/bin/backup-self.rsync.sh &gt;/dev/null 2&gt;&amp;1\n      # What needs upgrading?\n      15 0 * * *     root     nice -n 10   /usr/local/bin/upgradesync &gt;/dev/null 2&gt;&amp;1\n</code></pre>"},{"location":"CV-O.Rademakers_2024/","title":"Olivier RADEMAKERS","text":"<p>SERVICE DELIVERY MANAGER</p> <p>117, Blvd. de la R\u00e9publique 92420 Vaucresson, France  </p> <p>Born on August 25th, 1972 Nationality: Belgian Fluent in English &amp; French</p> <p>\ud83d\udcde +33 (0)6 51 43 65 06 \u2709\ufe0f  olivier.rademakers@gmail.com \ud83d\udd17 LinkedIn Profile \ud83c\udf10 Personal Website </p>"},{"location":"CV-O.Rademakers_2024/#objective","title":"OBJECTIVE","text":"<p>Highly experienced and adaptable Service Delivery Manager with over 30 years of expertise in IT landscape management, Security, and Operations Management. Proven track record of leading diverse teams and managing projects with budgets ranging from \u20ac500,000 to \u20ac2,000,000+. Adept at Agile methodologies with a focus on delivering exceptional customer service and driving operational excellence. Seeking a challenging role to leverage extensive experience and leadership skills in a dynamic IT organization.</p>"},{"location":"CV-O.Rademakers_2024/#summary-of-qualifications","title":"SUMMARY OF QUALIFICATIONS","text":"<ul> <li>More than three decades of in-depth experience in IT landscape management, Security, and Operations Management.</li> <li>Demonstrated ability to manage projects and contracts worth \u20ac500,000 to \u20ac2,000,000, leading teams of 5 to 35 members.</li> <li>Proficient in Agile methodologies and certified as a Scrum Master.</li> <li>Consistent track record of delivering projects within budget and on schedule, ensuring high customer satisfaction.</li> <li>Extensive experience in transitioning web infrastructures to cloud platforms, including Microsoft Azure, AWS, and GCP.</li> <li>Proven mastery in technical team management, P&amp;L oversight, and cultivating partnerships with key clients.</li> <li>Bilingual in French and English, possessing exceptional communication and interpersonal aptitudes.</li> </ul>"},{"location":"CV-O.Rademakers_2024/#professional-experience","title":"PROFESSIONAL EXPERIENCE","text":"<p>Claranet Service Delivery Manager Aug. 2021 \u2013 Present - Overseeing key account client relationships and driving technical team performance (3 to 6 DevOps). - Agile project management, including web infrastructure migrations to cloud environments (Azure, AWS, GCP). - Financial oversight of customer P&amp;L and ensuring project profitability.</p> <p>Atos Big Data &amp; Security Service Delivery Manager Jan. 2019 \u2013 Present - Directed a multinational team of engineers (25 in Poland, 10 in France, 5 in Romania) across diverse functions. - Central contact for clients, ensuring SLAs are met, coordinating projects, and managing request and incident workflows. - Identified pre-sales opportunities and tailored billing and contract strategies to enhance profit margins.</p> <p>Atos Big Data &amp; Security Project Manager Sep. 2017 \u2013 Dec. 2018 - Orchestrated IT support provider transitions and migrations like Ironport to Proofpoint. - Served as a critical liaison and project coordinator between client teams.</p> <p>Atos Big Data &amp; Security Senior Architect &amp; Pre-Sales Engineer (Solutions Architect) Jan. 2017 \u2013 Sep. 2017 - Developed complete infrastructures from the ground up and excelled as a technical expert in client presentations. - Provided technical consulting for workplace security solutions and contract drafting.</p> <p>Atos Global IT Unified Communication Application Manager / Technical Project Manager 2014 \u2013 2017 - Engineered and managed the transition of global mail platforms and SMTP infrastructures. - Achieved rigorous integration and decommissioning goals while driving technical projects.</p> <p>ATOS Infog\u00e9rance \u2013 Network &amp; Security Solutions System and Security Engineer 2004 \u2013 2014 - Administered critical internet infrastructure services and managed high-value client relationships. - Led innovative projects to integrate LDAP systems and design global backup frameworks.</p>"},{"location":"CV-O.Rademakers_2024/#earlier-career","title":"EARLIER CAREER","text":"<p>SCHLUMBERGER \u2013 Network Solutions System Administrator and Technical Support 1997 \u2013 2003</p> <p>SCHLUMBERGER - CIS Helpdesk, PC Desktop Support &amp; User Training 1993 \u2013 1997</p>"},{"location":"CV-O.Rademakers_2024/#technical-expertise","title":"TECHNICAL EXPERTISE","text":"<ul> <li>Windows Systems: Active Directory, DNS, DHCP, WINS, IIS, MS Proxy, MS Exchange.</li> <li>Unix Systems: Solaris, Linux, DNS (Bind), Squid, Apache (Web and Reverse Proxy), LDAP (OpenLDAP &amp; iPlanet), SMTP solutions.</li> <li>Programming Languages &amp; Environments: PHP, Perl, Shell scripting, ADA, CAML, RPG 400, COBOL.</li> </ul>"},{"location":"CV-O.Rademakers_2024/#education-and-training","title":"EDUCATION AND TRAINING","text":"<ul> <li> <p>Night Course in Algorithms and Programming   1994, Centre National des Arts et M\u00e9tiers</p> </li> <li> <p>Analyst/Programmer Training on IBM AS/400   1993, Institut Europ\u00e9en Informatique</p> </li> <li> <p>International Baccalaureate   1991, American School of Paris</p> </li> </ul>"},{"location":"CV-O.Rademakers_2024/#certifications-and-interests","title":"CERTIFICATIONS AND INTERESTS","text":"<ul> <li>Sauveteur Secouriste du Travail (lifeguard @ the workplace), 2010</li> <li>Enjoys snowboarding, fitness, playing the guitar</li> <li>Engages in Arduino &amp; Raspberry Pi projects, photography</li> <li>Practices Jiu-Jitsu</li> <li>Passionate about leadership and parenting</li> </ul>"},{"location":"Nextcloud/","title":"Setup","text":"<p># Nextcloud</p> <p>While services like Google Drive, Dropbox, and OneDrive are practical options for cloud storage, they can be limiting with their available disk space\u2014making it challenging to host large files such as a music library. Nextcloud eliminates this limitation by enabling you to host your own cloud service that\u2019s accessible from anywhere.</p> <p>I utilize a Raspberry Pi 5 equipped with a NVMe hat and a NVMe SSD 2TB drive, thus ensuring ample disk space for my needs.</p>"},{"location":"Nextcloud/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Raspberry PI 5 (or equivalent hardware) (1)</li> <li>Docker</li> </ul> <ol> <li>Using a Raspberry Pi for this project is cost-effective, not only in terms of initial investment but also for ongoing power consumption, with only about 5W used when idle. However, if you already have a server, you can follow the same installation steps on that hardware and operating system.</li> </ol>"},{"location":"Nextcloud/#docker","title":"Docker","text":"<p>Although Docker is a prerequisite, let\u2019s briefly cover its installation, as we won\u2019t be using the version that comes with the operating system\u2019s packages. Instead, we\u2019ll follow the installation guide provided on the Docker website.</p> <p>Setup Docker apt repository</p> <pre><code># Add Docker's official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add the repository to Apt sources:\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \\\n  $(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n</code></pre> <p>To install the latest version</p> <pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre> <p>Test</p> <pre><code>sudo docker run hello-world\n</code></pre>"},{"location":"Nextcloud/#reverse-proxy","title":"Reverse proxy","text":"<p>To avoid exposing the Nextcloud instance directly and to keep ports 80 &amp; 443 available for other services, a reverse proxy is essential. Despite being more familiar with Apache, in the spirit of learning, I chose Nginx, specifically the Nginx Proxy Manager project, which has a Docker image and offers an intuitive UI. This image is also available on Docker Hub.</p>"},{"location":"Nextcloud/#nextcloud","title":"Nextcloud","text":"<p>Nextcloud offers several installation options and provides a Docker image alongside instructions for setting it up.</p>"},{"location":"Nextcloud/#docker-composeyml","title":"docker-compose.yml","text":"<p>Both Nginx and Nextcloud require seperate database containers. We'll create one <code>docker-compose.yml</code> file to manage all four Docker images:</p> <pre><code>volumes:\n  nextcloud-data:\n  nextcloud-db:\n  npm-data:\n  npm-ssl:\n  npm-db:\n\nnetworks:\n  frontend:\n    # add this if the network is arleardy existing\n    # external: true\n  backend:\n    # external: true\n\nservices:\n  nextcloud-app:\n    image: nextcloud\n    restart: unless-stopped\n    volumes:\n      - nextcloud-data:/var/www/html\n    environment:\n      - MYSQL_PASSWORD=secure_password\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n      - MYSQL_HOST=nextcloud-db\n    networks:\n      - frontend\n      - backend\n\n  nextcloud-db:\n    image: mariadb\n    restart: unless-stopped\n    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW\n    volumes:\n      - nextcloud-db:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=very_secure_password\n      - MYSQL_PASSWORD=secure_password\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n    networks:\n      - backend\n\n  npm-app:\n    image: jc21/nginx-proxy-manager:latest\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"81:81\"\n      - \"443:443\"\n    environment:\n      - DB_MYSQL_HOST=npm-db\n      - DB_MYSQL_PORT=3306\n      - DB_MYSQL_USER=npm\n      - DB_MYSQL_PASSWORD=another_secure_password\n      - DB_MYSQL_NAME=npm\n    volumes:\n      - npm-data:/data\n      - npm-ssl:/etc/letsencrypt\n    networks:\n      - frontend\n      - backend\n\n  npm-db:\n    image: jc21/mariadb-aria:latest\n    restart: unless-stopped\n    environment:\n      - MYSQL_ROOT_PASSWORD=yet_another_very_secure_password\n      - MYSQL_DATABASE=npm\n      - MYSQL_USER=npm\n      - MYSQL_PASSWORD=yet_another_secure_password\n    volumes:\n      - npm-db:/var/lib/mysql\n    networks:\n      - backend\n</code></pre> <p>This <code>docker-compose.yml</code> file should be located in the <code>/opt/nextcloud</code> directory.</p>"},{"location":"Nextcloud/#starting-up","title":"Starting up","text":"<p>To launch the services defined in the <code>docker-compose.yml</code> file, use the following command:</p> <pre><code>sudo docker compose up -d\n</code></pre> <p>Warning</p> <p>See section \"Essential details\" before continuing. The <code>config/config.php</code> file must be updated before moving on.</p>"},{"location":"Nextcloud/#npm-config","title":"NPM config","text":"<p>Navigate to the Nginx Proxy Manager by entering http://:81 in your web browser, where you will be greeted by a login screen: <p></p> <p>Note</p> <p>The default login credentials are <code>admin@example.com</code> for the username and <code>changeme</code> for the password. Upon first login, you will be prompted to change these to secure ones.</p> <p>Once logged in, the dashboard will resemble the following:</p> <p></p> <p>To begin creating a proxy host, navigate to \"Hosts\" and then \"Proxy Hosts\" from the top menu, or click \"Proxy Hosts\" on the main dashboard. Initially, you will see no existing hosts until you add a new one by selecting \"Add Proxy Host\":</p> <p></p> <p>When adding the proxy host:</p> <ul> <li>Under \"Domain Names,\" enter the FQDN to access Nextcloud, such as <code>nextcloud.example.com</code>.</li> <li>For \"Scheme,\" select <code>http</code> since network traffic will be encrypted by the reverse proxy. (1)</li> <li>In \"Forward Hostname / IP,\" input the Docker container's name.</li> <li>Set \"Forward Port\" to 80.</li> <li>Enable \"Block Common Exploits\" for added security.</li> </ul> <ol> <li>The traffic will be secure from the internet to the reverse proxy, while the connection from the reverse proxy to the Nextcloud container will be unencrypted. This is commonly acceptable within a trusted network.</li> </ol> <p>Next, under the SSL tab within \"Edit Proxy Host,\" configure the SSL certificate:</p> <p></p> <p>Choose \"Request a new SSL Certificate\" and create one with Let's Encrypt. This process uses Certbot and should be seamless.</p> <p>After configuration, your \"Proxy Hosts\" should appear as follows:</p> <p></p> <p>Access Nextcloud's web interface securely over HTTPS via your FQDN. From the \"Proxy Hosts\" list, click the FQDN link in the \"SOURCE\" column to verify the connection.</p> <p>You should reach Nextcloud's login page: </p>"},{"location":"Nextcloud/#helpful-docker-commands","title":"Helpful docker commands","text":"<p>Retrieve logs from all containers:</p> <pre><code>docker compose logs (1)\n</code></pre> <ol> <li>This will dump all the different containers' logs in your terminal. You can grep for a specific container if you wish, or pipe it to <code>more</code>.</li> </ol> <p>Connect to the Nextcloud container using bash:</p> <pre><code>docker exec -it nextcloud-nextcloud-app-1 /bin/bash (1)\n</code></pre> <ol> <li>This will connect you to the nextcloud-app instance with a bash shell.</li> </ol> <p>Note</p> <p>Not all Docker containers come with a bash shell packaged in. One of the DB instances running mariadb is running in alpine and you'll have to specify <code>sh</code> instead of <code>bash</code></p> <p>To reset the Nextcloud admin password from the command line:</p> <pre><code>docker exec -it -u www-data nextcloud-nextcloud-app-1 php /var/www/html/occ user:resetpassword admin (1)\n</code></pre> <ol> <li>If you forgot your admin password... \"admin\" is the account you created when you initialy connected to the Nextcloud web UI</li> </ol> <p>Stopping all running containers:</p> <pre><code>docker compose stop (1)\n</code></pre> <ol> <li>Very explicit command, but you can also append a specific container name.</li> </ol> <p>Stop and remove all containers, networks and volumes:</p> <pre><code>docker compose down\n</code></pre> <p>Adding your user to the docker group:</p> <pre><code>sudo usermod -aG docker rademakr (1)\n</code></pre> <ol> <li>Add you user account to the <code>docker</code> group. Avoids having to run <code>sudo</code> for (most) docker commands.</li> </ol> <p>Remove Volumes:</p> <pre><code>docker volume ls  # List volumes\ndocker volume rm &lt;volume_name&gt; (1)\n</code></pre> <ol> <li>If you want to completely reset the date, including uploaded files and database. Be careful--this erases all Nextcloud data.</li> </ol> <p>Recreate Nextcloud from scratch with freshly pulled Images:</p> <pre><code>docker compose pull  # Pull all new images for described instances in the dockerfile\ndocker compose up -d (1)\n</code></pre> <ol> <li>Once this step is done, you'll need to navigate to https://my.zen-cloud.net to init your admin account + reinstall apps on phone and desktop</li> </ol>"},{"location":"Nextcloud/#connecting-to-the-instanaces","title":"Connecting to the instanaces","text":"<p>Connecting to the main Nextcloud-app instance:</p> <pre><code>docker exec -it nextcloud-nextcloud-app-1 /bin/bash\n</code></pre> <p>or the Nextcloud-db:</p> <pre><code>docker exec -it nextcloud-nextcloud-db-1 sh\n</code></pre>"},{"location":"Nextcloud/#essential-details","title":"Essential details","text":"<p>Configuration adjustments are necessary within the Nextcloud instance. Modify the <code>config/config.php</code> file to include your Fully Qualified Domain Name (FQDN) in the trusted domains array:</p> <pre><code>'trusted_domains' =&gt;\narray (\n  0 =&gt; '10.5.5.210:8080',\n  1 =&gt; 'my.zen-cloud.net',\n),\n</code></pre> <p>While editing <code>config/config.php</code>, also ensure these lines are present or uncommented to force the use of HTTPS:</p> <pre><code>'overwrite.cli.url' =&gt; 'https://my.zen-cloud.net',\n'overwriteprotocol' =&gt; 'https',\n</code></pre> <p>To automate updates for Docker containers, consider using Watchtower. The following command will run Watchtower once in debug mode:</p> <pre><code>docker run --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --run-once --debug\n</code></pre>"},{"location":"Nextcloud/#todo","title":"TODO","text":""},{"location":"RPi/","title":"Raspberry Pi tips","text":"<p>Boot from NVMe (1)</p> <ol> <li>sudo rpi-eeprom-config --edit</li> </ol> <p>Monitoring (1)</p> <ol> <li>The choice of the monitoring tool (nagios), howto set it up, extend possibilities with nrpe and eventually beautification with grafana</li> </ol> <p>LDAP (1)</p> <ol> <li>Because I had a real hard time setting it up with Ansible (in multi-master replication), but also because LDAP is soo cool ^^</li> </ol>"},{"location":"TODO/","title":"TODO","text":"<p>Add page for Ansible (1)</p> <ol> <li>How Ansible is used for automation in the homelab, and what Ansible leaves to the admin.</li> </ol> <p>Monitoring (1)</p> <ol> <li>The choice of the monitoring tool (nagios), howto set it up, extend possibilities with nrpe and eventually beautification with grafana</li> </ol> <p>LDAP (1)</p> <ol> <li>Because I had a real hard time setting it up with Ansible (in multi-master replication), but also because LDAP is soo cool ^^</li> </ol>"}]}